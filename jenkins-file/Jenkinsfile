import java.text.SimpleDateFormat

def getCurrentTime() {
  // Get the current time in milliseconds.
  long timestamp = System.currentTimeMillis()

  // Create a DateFormatter object.
  def formatter = new SimpleDateFormat('yyyy-MM-dd_HH-mm-ss')

  // Format the current time.
  formatter.format(timestamp)
}

// Try to resolve variable in order from environment then props, null if empty
def getContextVariable(Object props, String name) {
    env.getProperty(name) ?: props[name]?.trim()
}

// Try to resolve variable in order from environment then props, error if empty
def getEssentialContextVariable(Object props, String name) {
    def result = env.getProperty(name) ?: props[name]?.trim()
    if (result == null)
        error "$name is an essinsial input, please add to enviremont by file or manually."
    result
}


node {
    // load build properties, a co-work phase by envInject and Pipeline Utility Steps plugins
    if (env.propertiesFilePath == null)
      error "The 'propertiesFilePath' should define as 'Properties Content'."
    def props = null
    try {
      props = readProperties file: env.propertiesFilePath
      echo "props loaded successfully."
    } catch (Exception e) {
      error "The 'propertiesFilePath' environment variable is not valid."
      echo e.message
    }

    def remote = [:]
    remote.name = getEssentialContextVariable(props, 'remoteName')
    remote.host = getEssentialContextVariable(props, 'remoteHost')
    remote.user = getEssentialContextVariable(props, 'remoteUser')
    remote.password = getEssentialContextVariable(props, 'remotePassword')
    remote.allowAnyHosts = getEssentialContextVariable(props, 'remoteAllowAnyHosts').toBoolean()

    stage('Checking host ...') {
      sshCommand remote: remote, command: "docker --version", failOnError: true
      sshCommand remote: remote, command: "psql --version", failOnError: true
    }

    def POSTGRESQL_VERSION = getContextVariable(props, 'postgresqlVersion') ?: "14"
    def DB_NAME = getContextVariable(props, 'dbName') ?: 'thingsboard'
    def CONTAINER_NAME = getContextVariable(props, 'containerName') ?: "mytb"
    def DOCKER_COMPOSE_PATH = getContextVariable(props, 'dockerComposePath') ?: "/root/tb-compose/docker-compose.yaml"
    // backup name format = System name + database name + date + time + backup type
    def BACKUP_FILE_NAME = "${remote.name}-${DB_NAME}-${getCurrentTime()}-FULL.sql"
    def DB_BACK_UP_COMMAND = "sudo -u postgres sh -c 'cd \$HOME/" + POSTGRESQL_VERSION + "/backups && pwd && pg_dump -U postgres -d ${DB_NAME} > ${BACKUP_FILE_NAME}'"
    // def DB_BACK_UP_COMMAND = "docker compose -f ${DOCKER_COMPOSE_PATH} exec ${CONTAINER_NAME} /usr/bin/pg_dump -U thingsboard ${DB_NAME} > ${BACKUP_FILE_NAME} && pwd"
    def REMOVE_BACKUP_FILE = "rm -f "

    stage('Backuping DB ...') {
      def BACK_UP_DIR = sshCommand remote: remote, command: DB_BACK_UP_COMMAND, failOnError: true
      sshGet remote: remote, from: BACK_UP_DIR + "/" + BACKUP_FILE_NAME, into: BACKUP_FILE_NAME, override: true, failOnError: true
      sshCommand remote: remote, command: REMOVE_BACKUP_FILE + BACK_UP_DIR + "/" + BACKUP_FILE_NAME, failOnError: true
    }

    def DOCKER_REGISTRY_HOST = getContextVariable(props, 'dockerRegistryHost') ?: "172.16.4.10"
    def DOCKER_REGISTRY_PORT = getContextVariable(props, 'dockerRegistryPort') ?: "5000"
    def IMAGE_NAME = "${DOCKER_REGISTRY_HOST}:${DOCKER_REGISTRY_PORT}/controlix/tb-postgres"
    def DOCKER_PULL_COMMAND = "docker pull ${IMAGE_NAME}"
    def COMPOSE_DOWN = "docker compose -f ${DOCKER_COMPOSE_PATH} stop"
    def COMPOSE_UP = "docker compose -f ${DOCKER_COMPOSE_PATH} up -d"
    def SPRING_DATA_ARGS = '-e SPRING_DATASOURCE_URL="jdbc:postgresql://172.17.0.1:5432/thingsboard" -e SPRING_DATASOURCE_USERNAME="postgres" -e SPRING_DATASOURCE_PASSWORD="postgres"'
    def UPGRADE_DB = "docker run -i -v ~/.mytb-data:/data --rm ${SPRING_DATA_ARGS} ${IMAGE_NAME} upgrade-tb.sh"
    def DOCKER_COMPOSE_RM = "echo y | docker compose -f ${DOCKER_COMPOSE_PATH} rm ${CONTAINER_NAME}"

    stage('Composing docker image ...') {
      sshCommand remote: remote, command: DOCKER_PULL_COMMAND, failOnError: true
      sshCommand remote: remote, command: COMPOSE_DOWN, failOnError: true
      sshCommand remote: remote, command: UPGRADE_DB, failOnError: false
      sshCommand remote: remote, command: DOCKER_COMPOSE_RM, failOnError: true
      sshCommand remote: remote, command: COMPOSE_UP, failOnError: true
    }

}
