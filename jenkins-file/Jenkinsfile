import java.text.SimpleDateFormat

def getCurrentTime() {
    // Get the current time in milliseconds.
    long timestamp = System.currentTimeMillis()

    // Create a DateFormatter object.
    def formatter = new SimpleDateFormat('yyyy-MM-dd_HH-mm-ss')

    // Format the current time.
    formatter.format(timestamp)
}

node {
  def remote = [:]
  remote.name = 'dev2'
  remote.host = '172.16.4.3'
  remote.user = 'root'
  remote.password = 'qw12'
  remote.allowAnyHosts = true

  def POSTGRESQL_VERSION = '14'
  def DB_NAME = 'thingsboard'
  // backup name format = System name + database name + date + time + backup type
  def BACKUP_FILE_NAME = "${remote.name}-${DB_NAME}-${getCurrentTime()}-FULL.sql"
  def GO_TO_BACKUP_FOLDER = "cd \$HOME/" + POSTGRESQL_VERSION + "/backups"
  def DB_BACK_UP_COMMAND = "sudo -u postgres sh -c 'cd \$HOME/" + POSTGRESQL_VERSION  + "/backups && pwd && pg_dump -U postgres -d ${DB_NAME} > ${BACKUP_FILE_NAME}'"

  stage('Checking host ...') {
    sshCommand remote: remote, command: "docker --version" , failOnError: true
    sshCommand remote: remote, command: "psql --version" , failOnError: true
  }

  stage('Backuping DB ...') {
    def BACK_UP_DIR = sshCommand remote: remote, command: DB_BACK_UP_COMMAND, failOnError: true
    sshGet remote: remote, from: BACK_UP_DIR + "/" + BACKUP_FILE_NAME, into: BACKUP_FILE_NAME, override: true, failOnError: true
  }

  def DOCKER_REGISTRY_HOST = "172.16.4.10"
  def DOCKER_PULL_COMMAND = "docker pull ${DOCKER_REGISTRY_HOST}:"

  stage('Pulling docker image ...') {
    // sshCommand remote: remote, command: DB_BACK_UP_COMMAND, failOnError: true
  }

}
